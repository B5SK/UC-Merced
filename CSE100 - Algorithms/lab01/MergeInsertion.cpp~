#include <iostream>
#include <stdlib.h>
#include <string>

using namespace std;



void Merge(int* A, int b, int m, int e){//b = beginning | m = middle | e = end
					//[b <-> m] & [m+1 <-> e]

	int NL = m - b;
	int NR = e - m;

	int L[NL];
	int R[NR];

	for(int i = 0; i<NL; i++){
		L[i] = A[b+i];
	}
	for(int i = 0;i<NR; i++){
		R[i] = A[m+i];
	}

	int y = 0;//Left
	int z = 0;//Right
	for(int k = b; k<e; k++){
		
		if(NL = y && NR != z) A[k] = R[z];
		else if(NR = z && NL != y) A[k] = L[y];
		else if(L[y] <= R[z]){
			A[k] = L[y];
			y = y + 1;
		}
		else{
		A[k] = R[z];
		z=z+1;
		}
	}

}

void Insertion(int* A, int b, int e){

	int key;
	for(int i = b+1; i<e; i++){
		key = A[i];
		int j = i-1;
		while(j>=b && A[j] > key){
			A[j+1] = A[j];
			j = j - 1;
		}
		A[j+1] = key;
	}

}


void MergeS(int* A, int b, int e){//Merge Sort

	if(e-b > 10){

	int middle = (e+b)/2;

	MergeS(A,b,middle-1);
	MergeS(A,middle,e);
	Merge(A,b,middle,e);
	}
	else Insertion(A, b, e);
}

void Sort(int* A){

	int length = (sizeof(A)/sizeof(*A));
	if(length < 10) Insertion(A, 0, length);


	MergeS(A, 0, length);

}

int main(int argc, char** argv){

	int* Array;
	int Size;

	cin >> Size;

	Array = new int[Size];

	for(int i = 0; i<Size; i++){
		cin >> Array[i];
	}

	Sort(Array);

	//Output
	for(int i = 0; i<Size; i++){
		cout << Array[i]<<endl;
	}

	delete[] Array;
	return 0;
}
